# Use new trusty images, should yield newer compilers and packages
sudo: required
dist: trusty
language: cpp

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    # Install GCC
    - gcc-5
    - g++-5
    # Install Python
    - python
    - python-dev
    - python-pip
    # Install LibSSL
    - libssl-dev
    # Install Protocol Buffer Compiler
    - protobuf-compiler
    - libprotobuf-dev
services:
  # Start up Docker
  - docker
before_install:
  - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc
  - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-5 /usr/bin/g++
  # Print the version of gcc
  - gcc --version
  # Print the python & pip version
  - python -V
  - pip -V
  # Install python protocol buffer & zmq modules
  - sudo pip install protobuf pyzmq
  - pip install protobuf pyzmq
  - sudo pip install --user protobuf pyzmq
  # Get DVS Interfaces
  - git clone https://github.com/AO-StreetArt/DvsInterface.git
  - cd DvsInterface && sudo make install
  - sudo docker network create dvs
  # Clone the repository for the python tests
  - cd $TRAVIS_BUILD_DIR
  - git clone https://github.com/AO-StreetArt/0-Meter.git
install:
  - cd $TRAVIS_BUILD_DIR
  # Setup Consul
  - sudo docker pull consul
  - sudo docker run -d --name=registry --network=dvs consul
  # Set up Neo4j
  - sudo docker pull mongo
  - sudo docker run -d --network=dvs --name=database mongo
  # Set up Redis
  - sudo docker pull redis
  - sudo docker run --network=dvs --name=cache -d redis
  # Populate Consul Configuration variables
  - sudo docker exec -t registry curl -X PUT -d 'cache--6379----2--5--0' http://localhost:8500/v1/kv/ivan/RedisConnectionString
  - sudo docker exec -t registry curl -X PUT -d 'mongodb://database:27017/' http://localhost:8500/v1/kv/ivan/Mongo_ConnectionString
  - sudo docker exec -t registry curl -X PUT -d 'mydb' http://localhost:8500/v1/kv/ivan/Mongo_DbName
  - sudo docker exec -t registry curl -X PUT -d 'test' http://localhost:8500/v1/kv/ivan/Mongo_DbCollection
  - sudo docker exec -t registry curl -X PUT -d 'True' http://localhost:8500/v1/kv/ivan/StampTransactionId
  - sudo docker exec -t registry curl -X PUT -d 'True' http://localhost:8500/v1/kv/ivan/AtomicTransactions
  - sudo docker exec -t registry curl -X PUT -d 'Json' http://localhost:8500/v1/kv/ivan/Data_Format_Type
before_script:
  # Wait for some time to allow the docker instance to finish building
  - cd $TRAVIS_BUILD_DIR/scripts/linux && ./build_docker_instance.sh $TRAVIS_BRANCH $TRAVIS_BUILD_DIR
  # Start Crazy Ivan
  - cd $TRAVIS_BUILD_DIR/scripts/linux && ./run_docker_instance.sh $TRAVIS_BRANCH registry:8500 localhost 5555
  - sleep 30
  # Show the logs from the crazy ivan docker container
  - sudo docker logs --tail 75 clyman
script:
  # Execute the Python Tests
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_crt.xml
  - cat $TRAVIS_BUILD_DIR/obj_crt.log
  - sudo docker logs --tail 75 clyman
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_get.xml
  - cat $TRAVIS_BUILD_DIR/obj_get.log
  - sudo docker logs --tail 75 clyman
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_upd.xml
  - cat $TRAVIS_BUILD_DIR/obj_upd.log
  - sudo docker logs --tail 75 clyman
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_name_query.xml
  - cat $TRAVIS_BUILD_DIR/obj_name_query.log
  - sudo docker logs --tail 75 clyman
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_type_query.xml
  - cat $TRAVIS_BUILD_DIR/obj_type_query.log
  - sudo docker logs --tail 75 clyman
  - cd $TRAVIS_BUILD_DIR && python 0-Meter/0-meter.py ci/obj_del.xml
  - cat $TRAVIS_BUILD_DIR/obj_del.log
  - sudo docker logs --tail 75 clyman
after_success:
  # Push the built image to docker hub
  - cd $TRAVIS_BUILD_DIR/scripts/linux && ./push_docker_instance.sh $DOCKER_MAIL $DOCKER_UN $DOCKER_PW $TRAVIS_BRANCH $TRAVIS_BUILD_DIR
